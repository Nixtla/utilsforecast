# Autogenerated by nbdev

d = { 'settings': { 'branch': 'main',
                'doc_baseurl': '/utilsforecast',
                'doc_host': 'https://Nixtla.github.io',
                'git_url': 'https://github.com/Nixtla/utilsforecast',
                'lib_path': 'utilsforecast'},
  'syms': { 'utilsforecast.compat': {},
            'utilsforecast.data': {'utilsforecast.data.generate_series': ('data.html#generate_series', 'utilsforecast/data.py')},
            'utilsforecast.evaluation': { 'utilsforecast.evaluation._function_name': ( 'evaluation.html#_function_name',
                                                                                       'utilsforecast/evaluation.py'),
                                          'utilsforecast.evaluation.evaluate': ('evaluation.html#evaluate', 'utilsforecast/evaluation.py')},
            'utilsforecast.grouped_array': { 'utilsforecast.grouped_array.GroupedArray': ( 'grouped_array.html#groupedarray',
                                                                                           'utilsforecast/grouped_array.py'),
                                             'utilsforecast.grouped_array.GroupedArray.__getitem__': ( 'grouped_array.html#groupedarray.__getitem__',
                                                                                                       'utilsforecast/grouped_array.py'),
                                             'utilsforecast.grouped_array.GroupedArray.__init__': ( 'grouped_array.html#groupedarray.__init__',
                                                                                                    'utilsforecast/grouped_array.py'),
                                             'utilsforecast.grouped_array.GroupedArray.__len__': ( 'grouped_array.html#groupedarray.__len__',
                                                                                                   'utilsforecast/grouped_array.py'),
                                             'utilsforecast.grouped_array.GroupedArray.__repr__': ( 'grouped_array.html#groupedarray.__repr__',
                                                                                                    'utilsforecast/grouped_array.py'),
                                             'utilsforecast.grouped_array.GroupedArray._take_from_ranges': ( 'grouped_array.html#groupedarray._take_from_ranges',
                                                                                                             'utilsforecast/grouped_array.py'),
                                             'utilsforecast.grouped_array.GroupedArray.append': ( 'grouped_array.html#groupedarray.append',
                                                                                                  'utilsforecast/grouped_array.py'),
                                             'utilsforecast.grouped_array.GroupedArray.append_several': ( 'grouped_array.html#groupedarray.append_several',
                                                                                                          'utilsforecast/grouped_array.py'),
                                             'utilsforecast.grouped_array.GroupedArray.from_sorted_df': ( 'grouped_array.html#groupedarray.from_sorted_df',
                                                                                                          'utilsforecast/grouped_array.py'),
                                             'utilsforecast.grouped_array.GroupedArray.take': ( 'grouped_array.html#groupedarray.take',
                                                                                                'utilsforecast/grouped_array.py'),
                                             'utilsforecast.grouped_array.GroupedArray.take_from_groups': ( 'grouped_array.html#groupedarray.take_from_groups',
                                                                                                            'utilsforecast/grouped_array.py'),
                                             'utilsforecast.grouped_array._append_one': ( 'grouped_array.html#_append_one',
                                                                                          'utilsforecast/grouped_array.py'),
                                             'utilsforecast.grouped_array._append_several': ( 'grouped_array.html#_append_several',
                                                                                              'utilsforecast/grouped_array.py')},
            'utilsforecast.losses': { 'utilsforecast.losses._base_docstring': ('losses.html#_base_docstring', 'utilsforecast/losses.py'),
                                      'utilsforecast.losses._pl_agg_expr': ('losses.html#_pl_agg_expr', 'utilsforecast/losses.py'),
                                      'utilsforecast.losses._zero_to_nan': ('losses.html#_zero_to_nan', 'utilsforecast/losses.py'),
                                      'utilsforecast.losses.calibration': ('losses.html#calibration', 'utilsforecast/losses.py'),
                                      'utilsforecast.losses.coverage': ('losses.html#coverage', 'utilsforecast/losses.py'),
                                      'utilsforecast.losses.mae': ('losses.html#mae', 'utilsforecast/losses.py'),
                                      'utilsforecast.losses.mape': ('losses.html#mape', 'utilsforecast/losses.py'),
                                      'utilsforecast.losses.mase': ('losses.html#mase', 'utilsforecast/losses.py'),
                                      'utilsforecast.losses.mqloss': ('losses.html#mqloss', 'utilsforecast/losses.py'),
                                      'utilsforecast.losses.mse': ('losses.html#mse', 'utilsforecast/losses.py'),
                                      'utilsforecast.losses.quantile_loss': ('losses.html#quantile_loss', 'utilsforecast/losses.py'),
                                      'utilsforecast.losses.rmae': ('losses.html#rmae', 'utilsforecast/losses.py'),
                                      'utilsforecast.losses.rmse': ('losses.html#rmse', 'utilsforecast/losses.py'),
                                      'utilsforecast.losses.scaled_crps': ('losses.html#scaled_crps', 'utilsforecast/losses.py'),
                                      'utilsforecast.losses.smape': ('losses.html#smape', 'utilsforecast/losses.py')},
            'utilsforecast.plotting': { 'utilsforecast.plotting._filter_series': ( 'plotting.html#_filter_series',
                                                                                   'utilsforecast/plotting.py'),
                                        'utilsforecast.plotting.plot_series': ('plotting.html#plot_series', 'utilsforecast/plotting.py')},
            'utilsforecast.preprocessing': { 'utilsforecast.preprocessing._determine_bound': ( 'preprocessing.html#_determine_bound',
                                                                                               'utilsforecast/preprocessing.py'),
                                             'utilsforecast.preprocessing.fill_gaps': ( 'preprocessing.html#fill_gaps',
                                                                                        'utilsforecast/preprocessing.py')},
            'utilsforecast.processing': { 'utilsforecast.processing.DataFrameProcessor': ( 'processing.html#dataframeprocessor',
                                                                                           'utilsforecast/processing.py'),
                                          'utilsforecast.processing.DataFrameProcessor.__init__': ( 'processing.html#dataframeprocessor.__init__',
                                                                                                    'utilsforecast/processing.py'),
                                          'utilsforecast.processing.DataFrameProcessor.counts_by_id': ( 'processing.html#dataframeprocessor.counts_by_id',
                                                                                                        'utilsforecast/processing.py'),
                                          'utilsforecast.processing.DataFrameProcessor.maybe_compute_sort_indices': ( 'processing.html#dataframeprocessor.maybe_compute_sort_indices',
                                                                                                                      'utilsforecast/processing.py'),
                                          'utilsforecast.processing.DataFrameProcessor.process': ( 'processing.html#dataframeprocessor.process',
                                                                                                   'utilsforecast/processing.py'),
                                          'utilsforecast.processing.DataFrameProcessor.value_cols_to_numpy': ( 'processing.html#dataframeprocessor.value_cols_to_numpy',
                                                                                                               'utilsforecast/processing.py'),
                                          'utilsforecast.processing._polars_categorical_to_numerical': ( 'processing.html#_polars_categorical_to_numerical',
                                                                                                         'utilsforecast/processing.py'),
                                          'utilsforecast.processing.assign_columns': ( 'processing.html#assign_columns',
                                                                                       'utilsforecast/processing.py'),
                                          'utilsforecast.processing.copy_if_pandas': ( 'processing.html#copy_if_pandas',
                                                                                       'utilsforecast/processing.py'),
                                          'utilsforecast.processing.counts_by_id': ( 'processing.html#counts_by_id',
                                                                                     'utilsforecast/processing.py'),
                                          'utilsforecast.processing.drop_index_if_pandas': ( 'processing.html#drop_index_if_pandas',
                                                                                             'utilsforecast/processing.py'),
                                          'utilsforecast.processing.filter_with_mask': ( 'processing.html#filter_with_mask',
                                                                                         'utilsforecast/processing.py'),
                                          'utilsforecast.processing.group_by': ('processing.html#group_by', 'utilsforecast/processing.py'),
                                          'utilsforecast.processing.horizontal_concat': ( 'processing.html#horizontal_concat',
                                                                                          'utilsforecast/processing.py'),
                                          'utilsforecast.processing.is_in': ('processing.html#is_in', 'utilsforecast/processing.py'),
                                          'utilsforecast.processing.is_nan': ('processing.html#is_nan', 'utilsforecast/processing.py'),
                                          'utilsforecast.processing.is_nan_or_none': ( 'processing.html#is_nan_or_none',
                                                                                       'utilsforecast/processing.py'),
                                          'utilsforecast.processing.is_none': ('processing.html#is_none', 'utilsforecast/processing.py'),
                                          'utilsforecast.processing.join': ('processing.html#join', 'utilsforecast/processing.py'),
                                          'utilsforecast.processing.maybe_compute_sort_indices': ( 'processing.html#maybe_compute_sort_indices',
                                                                                                   'utilsforecast/processing.py'),
                                          'utilsforecast.processing.offset_dates': ( 'processing.html#offset_dates',
                                                                                     'utilsforecast/processing.py'),
                                          'utilsforecast.processing.rename': ('processing.html#rename', 'utilsforecast/processing.py'),
                                          'utilsforecast.processing.sort': ('processing.html#sort', 'utilsforecast/processing.py'),
                                          'utilsforecast.processing.take_rows': ( 'processing.html#take_rows',
                                                                                  'utilsforecast/processing.py'),
                                          'utilsforecast.processing.to_numpy': ('processing.html#to_numpy', 'utilsforecast/processing.py'),
                                          'utilsforecast.processing.vertical_concat': ( 'processing.html#vertical_concat',
                                                                                        'utilsforecast/processing.py')},
            'utilsforecast.target_transforms': { 'utilsforecast.target_transforms.BaseTargetTransform': ( 'target_transforms.html#basetargettransform',
                                                                                                          'utilsforecast/target_transforms.py'),
                                                 'utilsforecast.target_transforms.BaseTargetTransform.fit': ( 'target_transforms.html#basetargettransform.fit',
                                                                                                              'utilsforecast/target_transforms.py'),
                                                 'utilsforecast.target_transforms.BaseTargetTransform.fit_transform': ( 'target_transforms.html#basetargettransform.fit_transform',
                                                                                                                        'utilsforecast/target_transforms.py'),
                                                 'utilsforecast.target_transforms.BaseTargetTransform.inverse_transform': ( 'target_transforms.html#basetargettransform.inverse_transform',
                                                                                                                            'utilsforecast/target_transforms.py'),
                                                 'utilsforecast.target_transforms.BaseTargetTransform.transform': ( 'target_transforms.html#basetargettransform.transform',
                                                                                                                    'utilsforecast/target_transforms.py'),
                                                 'utilsforecast.target_transforms.GlobalFuncTransformer': ( 'target_transforms.html#globalfunctransformer',
                                                                                                            'utilsforecast/target_transforms.py'),
                                                 'utilsforecast.target_transforms.GlobalFuncTransformer.__init__': ( 'target_transforms.html#globalfunctransformer.__init__',
                                                                                                                     'utilsforecast/target_transforms.py'),
                                                 'utilsforecast.target_transforms.GlobalFuncTransformer.fit_transform': ( 'target_transforms.html#globalfunctransformer.fit_transform',
                                                                                                                          'utilsforecast/target_transforms.py'),
                                                 'utilsforecast.target_transforms.GlobalFuncTransformer.inverse_transform': ( 'target_transforms.html#globalfunctransformer.inverse_transform',
                                                                                                                              'utilsforecast/target_transforms.py'),
                                                 'utilsforecast.target_transforms.GlobalFuncTransformer.transform': ( 'target_transforms.html#globalfunctransformer.transform',
                                                                                                                      'utilsforecast/target_transforms.py'),
                                                 'utilsforecast.target_transforms.LocalBoxCox': ( 'target_transforms.html#localboxcox',
                                                                                                  'utilsforecast/target_transforms.py'),
                                                 'utilsforecast.target_transforms.LocalBoxCox.fit_transform': ( 'target_transforms.html#localboxcox.fit_transform',
                                                                                                                'utilsforecast/target_transforms.py'),
                                                 'utilsforecast.target_transforms.LocalBoxCox.inverse_transform': ( 'target_transforms.html#localboxcox.inverse_transform',
                                                                                                                    'utilsforecast/target_transforms.py'),
                                                 'utilsforecast.target_transforms.LocalBoxCox.transform': ( 'target_transforms.html#localboxcox.transform',
                                                                                                            'utilsforecast/target_transforms.py'),
                                                 'utilsforecast.target_transforms.LocalMinMaxScaler': ( 'target_transforms.html#localminmaxscaler',
                                                                                                        'utilsforecast/target_transforms.py'),
                                                 'utilsforecast.target_transforms.LocalRobustScaler': ( 'target_transforms.html#localrobustscaler',
                                                                                                        'utilsforecast/target_transforms.py'),
                                                 'utilsforecast.target_transforms.LocalRobustScaler.__init__': ( 'target_transforms.html#localrobustscaler.__init__',
                                                                                                                 'utilsforecast/target_transforms.py'),
                                                 'utilsforecast.target_transforms.LocalRobustScaler.fit': ( 'target_transforms.html#localrobustscaler.fit',
                                                                                                            'utilsforecast/target_transforms.py'),
                                                 'utilsforecast.target_transforms.LocalStandardScaler': ( 'target_transforms.html#localstandardscaler',
                                                                                                          'utilsforecast/target_transforms.py'),
                                                 'utilsforecast.target_transforms._common_scaler_inverse_transform': ( 'target_transforms.html#_common_scaler_inverse_transform',
                                                                                                                       'utilsforecast/target_transforms.py'),
                                                 'utilsforecast.target_transforms._common_scaler_transform': ( 'target_transforms.html#_common_scaler_transform',
                                                                                                               'utilsforecast/target_transforms.py'),
                                                 'utilsforecast.target_transforms._fit': ( 'target_transforms.html#_fit',
                                                                                           'utilsforecast/target_transforms.py'),
                                                 'utilsforecast.target_transforms._minmax_scaler_stats': ( 'target_transforms.html#_minmax_scaler_stats',
                                                                                                           'utilsforecast/target_transforms.py'),
                                                 'utilsforecast.target_transforms._robust_scaler_iqr_stats': ( 'target_transforms.html#_robust_scaler_iqr_stats',
                                                                                                               'utilsforecast/target_transforms.py'),
                                                 'utilsforecast.target_transforms._robust_scaler_mad_stats': ( 'target_transforms.html#_robust_scaler_mad_stats',
                                                                                                               'utilsforecast/target_transforms.py'),
                                                 'utilsforecast.target_transforms._standard_scaler_stats': ( 'target_transforms.html#_standard_scaler_stats',
                                                                                                             'utilsforecast/target_transforms.py'),
                                                 'utilsforecast.target_transforms._transform': ( 'target_transforms.html#_transform',
                                                                                                 'utilsforecast/target_transforms.py')},
            'utilsforecast.validation': { 'utilsforecast.validation.validate_format': ( 'validation.html#validate_format',
                                                                                        'utilsforecast/validation.py')}}}
