# Autogenerated by nbdev

d = { 'settings': { 'branch': 'main',
                'doc_baseurl': '/utilsforecast',
                'doc_host': 'https://Nixtla.github.io',
                'git_url': 'https://github.com/Nixtla/utilsforecast',
                'lib_path': 'utilsforecast'},
  'syms': { 'utilsforecast.compat': {},
            'utilsforecast.data': {'utilsforecast.data.generate_series': ('data.html#generate_series', 'utilsforecast/data.py')},
            'utilsforecast.evaluation': { 'utilsforecast.evaluation._function_name': ( 'evaluation.html#_function_name',
                                                                                       'utilsforecast/evaluation.py'),
                                          'utilsforecast.evaluation.evaluate': ('evaluation.html#evaluate', 'utilsforecast/evaluation.py')},
            'utilsforecast.grouped_array': { 'utilsforecast.grouped_array.GroupedArray': ( 'grouped_array.html#groupedarray',
                                                                                           'utilsforecast/grouped_array.py'),
                                             'utilsforecast.grouped_array.GroupedArray.__getitem__': ( 'grouped_array.html#groupedarray.__getitem__',
                                                                                                       'utilsforecast/grouped_array.py'),
                                             'utilsforecast.grouped_array.GroupedArray.__init__': ( 'grouped_array.html#groupedarray.__init__',
                                                                                                    'utilsforecast/grouped_array.py'),
                                             'utilsforecast.grouped_array.GroupedArray.__len__': ( 'grouped_array.html#groupedarray.__len__',
                                                                                                   'utilsforecast/grouped_array.py'),
                                             'utilsforecast.grouped_array.GroupedArray.__repr__': ( 'grouped_array.html#groupedarray.__repr__',
                                                                                                    'utilsforecast/grouped_array.py'),
                                             'utilsforecast.grouped_array.GroupedArray._take_from_ranges': ( 'grouped_array.html#groupedarray._take_from_ranges',
                                                                                                             'utilsforecast/grouped_array.py'),
                                             'utilsforecast.grouped_array.GroupedArray.append': ( 'grouped_array.html#groupedarray.append',
                                                                                                  'utilsforecast/grouped_array.py'),
                                             'utilsforecast.grouped_array.GroupedArray.append_several': ( 'grouped_array.html#groupedarray.append_several',
                                                                                                          'utilsforecast/grouped_array.py'),
                                             'utilsforecast.grouped_array.GroupedArray.take': ( 'grouped_array.html#groupedarray.take',
                                                                                                'utilsforecast/grouped_array.py'),
                                             'utilsforecast.grouped_array.GroupedArray.take_from_groups': ( 'grouped_array.html#groupedarray.take_from_groups',
                                                                                                            'utilsforecast/grouped_array.py'),
                                             'utilsforecast.grouped_array._append_one': ( 'grouped_array.html#_append_one',
                                                                                          'utilsforecast/grouped_array.py'),
                                             'utilsforecast.grouped_array._append_several': ( 'grouped_array.html#_append_several',
                                                                                              'utilsforecast/grouped_array.py')},
            'utilsforecast.losses': { 'utilsforecast.losses._base_docstring': ('losses.html#_base_docstring', 'utilsforecast/losses.py'),
                                      'utilsforecast.losses._pl_agg_expr': ('losses.html#_pl_agg_expr', 'utilsforecast/losses.py'),
                                      'utilsforecast.losses._zero_to_nan': ('losses.html#_zero_to_nan', 'utilsforecast/losses.py'),
                                      'utilsforecast.losses.calibration': ('losses.html#calibration', 'utilsforecast/losses.py'),
                                      'utilsforecast.losses.coverage': ('losses.html#coverage', 'utilsforecast/losses.py'),
                                      'utilsforecast.losses.mae': ('losses.html#mae', 'utilsforecast/losses.py'),
                                      'utilsforecast.losses.mape': ('losses.html#mape', 'utilsforecast/losses.py'),
                                      'utilsforecast.losses.mase': ('losses.html#mase', 'utilsforecast/losses.py'),
                                      'utilsforecast.losses.mqloss': ('losses.html#mqloss', 'utilsforecast/losses.py'),
                                      'utilsforecast.losses.mse': ('losses.html#mse', 'utilsforecast/losses.py'),
                                      'utilsforecast.losses.quantile_loss': ('losses.html#quantile_loss', 'utilsforecast/losses.py'),
                                      'utilsforecast.losses.rmae': ('losses.html#rmae', 'utilsforecast/losses.py'),
                                      'utilsforecast.losses.rmse': ('losses.html#rmse', 'utilsforecast/losses.py'),
                                      'utilsforecast.losses.scaled_crps': ('losses.html#scaled_crps', 'utilsforecast/losses.py'),
                                      'utilsforecast.losses.smape': ('losses.html#smape', 'utilsforecast/losses.py')},
            'utilsforecast.plotting': { 'utilsforecast.plotting._filter_series': ( 'plotting.html#_filter_series',
                                                                                   'utilsforecast/plotting.py'),
                                        'utilsforecast.plotting.plot_series': ('plotting.html#plot_series', 'utilsforecast/plotting.py')},
            'utilsforecast.preprocessing': { 'utilsforecast.preprocessing._determine_bound': ( 'preprocessing.html#_determine_bound',
                                                                                               'utilsforecast/preprocessing.py'),
                                             'utilsforecast.preprocessing.fill_gaps': ( 'preprocessing.html#fill_gaps',
                                                                                        'utilsforecast/preprocessing.py')},
            'utilsforecast.processing': { 'utilsforecast.processing.DataFrameProcessing': ( 'processing.html#dataframeprocessing',
                                                                                            'utilsforecast/processing.py'),
                                          'utilsforecast.processing.DataFrameProcessing.__init__': ( 'processing.html#dataframeprocessing.__init__',
                                                                                                     'utilsforecast/processing.py'),
                                          'utilsforecast.processing.DataFrameProcessing.process': ( 'processing.html#dataframeprocessing.process',
                                                                                                    'utilsforecast/processing.py'),
                                          'utilsforecast.processing._compute_sort_idxs': ( 'processing.html#_compute_sort_idxs',
                                                                                           'utilsforecast/processing.py'),
                                          'utilsforecast.processing._counts_by_id': ( 'processing.html#_counts_by_id',
                                                                                      'utilsforecast/processing.py'),
                                          'utilsforecast.processing._id_to_numpy': ( 'processing.html#_id_to_numpy',
                                                                                     'utilsforecast/processing.py'),
                                          'utilsforecast.processing._polars_categorical_to_numerical': ( 'processing.html#_polars_categorical_to_numerical',
                                                                                                         'utilsforecast/processing.py'),
                                          'utilsforecast.processing._value_cols_to_numpy': ( 'processing.html#_value_cols_to_numpy',
                                                                                             'utilsforecast/processing.py')},
            'utilsforecast.validation': { 'utilsforecast.validation.validate_format': ( 'validation.html#validate_format',
                                                                                        'utilsforecast/validation.py')}}}
