# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/utils.ipynb.

# %% auto 0
__all__ = ['ensure_dtypes']

# %% ../nbs/utils.ipynb 2
import inspect
from functools import wraps

# %% ../nbs/utils.ipynb 3
def ensure_dtypes(*names):
    def decorator(f):
        @wraps(f)
        def inner(*args, **kwargs):
            fparams = inspect.signature(f).parameters
            fparams_names = list(fparams.keys())
            for name in names:
                position = fparams_names.index(name)
                if position < len(args) or name in kwargs:
                    arg = args[position] if position < len(args) else kwargs[name]
                    expected_dtype = fparams[name].annotation
                    if not isinstance(arg, expected_dtype):
                        raise ValueError(
                            f"'{name}' should have the following type: {expected_dtype}. Got {type(arg)}."
                        )
            return f(*args, **kwargs)

        return inner

    return decorator
