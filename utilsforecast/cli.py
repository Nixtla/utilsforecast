# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/cli.ipynb.

# %% auto 0
__all__ = ['tst_flags', 'mapper', 'print_execs', 'print_hide', 'other_tests', 'get_markdown', 'extract_dir', 'no_dir_and_dir',
           'get_all_tests', 'print_dir_in_nb']

# %% ../nbs/cli.ipynb 1
from execnb.nbio import read_nb
from nbdev.processors import NBProcessor
from nbdev.export import ExportModuleProc, nb_export
from nbdev.maker import ModuleMaker
from fastcore.xtras import globtastic, Path
from functools import partial
from fastcore.script import call_parse

# %% ../nbs/cli.ipynb 3
tst_flags = "datasets distributed matplotlib polars pyarrow scipy".split()


def print_execs(cell):
    if "exec" in cell.source:
        print(cell.source)


def print_hide(cell):
    if "hide" in cell.directives_:
        print(cell.source)


def other_tests(cell):
    if len(cell.directives_) == 0:
        print(cell.source)


def get_markdown(cell):
    if cell.cell_type == "markdown":
        print(cell.source)


def extract_dir(cell, dir):
    if dir in cell.directives_:
        print(cell.source)


def no_dir_and_dir(cell, dir):
    if len(cell.directives_) == 0:
        print(cell.source)

    if dir in cell.directives_:
        print(cell.source)


def get_all_tests(cell):
    if len(cell.directives_) == 0:
        print(cell.source)

    if any(x in tst_flags + ["hide"] for x in cell.directives_):
        print(cell.source)

# %% ../nbs/cli.ipynb 5
mapper = {
    "print_execs": print_execs,
    "print_hide": print_hide,
    "other_tests": other_tests,
    "get_markdown": get_markdown,
    "extract_dir": extract_dir,
    "no_dir_and_dir": no_dir_and_dir,
    "get_all_tests": get_all_tests,
}

# %% ../nbs/cli.ipynb 6
@call_parse
def print_dir_in_nb(
    nb_path: str,
    dir: str = None,
    dir_name: str = None,
):
    if dir_name not in mapper.keys():
        raise ValueError(f"Choose processor from the the following: {mapper.keys()}")

    if dir_name == "extract_dir":
        processor = NBProcessor(nb_path, partial(extract_dir, dir=dir))
        processor.process()
        return
    elif dir_name == "no_dir_and_dir":
        processor = NBProcessor(nb_path, partial(no_dir_and_dir, dir=dir))
        processor.process()
        return

    processor = NBProcessor(nb_path, mapper[dir_name])
    processor.process()
