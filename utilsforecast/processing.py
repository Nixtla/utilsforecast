# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/processing.ipynb.

# %% auto 0
__all__ = ['DataFrameProcessor']

# %% ../nbs/processing.ipynb 2
from typing import Optional

import numpy as np
import pandas as pd

from .compat import DataFrame, pl_Series
from .grouped_array import GroupedArray
from .validation import validate_format

# %% ../nbs/processing.ipynb 3
def _polars_categorical_to_numerical(serie: pl_Series) -> pl_Series:
    import polars as pl

    if serie.dtype == pl.Categorical:
        serie = serie.cast(pl.Utf8).cast(pl.Float64)
    return serie


def _counts_by_id(df: DataFrame, id_col: str) -> DataFrame:
    id_counts = df[id_col].value_counts()
    if isinstance(id_counts, pd.Series):
        id_counts = id_counts.sort_index().reset_index()
        id_counts.columns = [id_col, "counts"]
    else:
        id_counts = id_counts.sort(id_col)
    return id_counts


def _value_cols_to_numpy(
    df: DataFrame, id_col: str, time_col: str, target_col: str
) -> np.ndarray:
    value_cols = [
        col for col in df.columns if col not in (id_col, time_col, target_col)
    ]
    # ensure target is the first column
    value_cols = [target_col] + value_cols
    if isinstance(df, pd.DataFrame):
        data = df[value_cols].to_numpy()
    else:
        import polars as pl

        try:
            expr = pl.all().map_batches(_polars_categorical_to_numerical)
        except AttributeError:
            expr = pl.all().map(_polars_categorical_to_numerical)

        data = df[value_cols].select(expr).to_numpy()
    return data

# %% ../nbs/processing.ipynb 4
class DataFrameProcessor:
    def __init__(
        self,
        id_col: str = "unique_id",
        time_col: str = "ds",
        target_col: str = "y",
    ):
        self.id_col = id_col
        self.time_col = time_col
        self.target_col = target_col

    def _maybe_compute_sort_indices(self, df: DataFrame) -> Optional[np.ndarray]:
        if isinstance(df, pd.DataFrame):
            idx = pd.MultiIndex.from_arrays([df[self.id_col].to_numpy(), self.times])
        else:
            import polars as pl

            sort_idxs = df.select(
                pl.arg_sort_by([self.id_col, self.time_col]).alias("idx")
            )["idx"].to_numpy()
            idx = pd.Index(sort_idxs)
        if idx.is_monotonic_increasing:
            return
        if isinstance(df, pd.DataFrame):
            sort_idxs = idx.argsort()
        return sort_idxs

    def process(self, df: DataFrame) -> None:
        # validations
        validate_format(df, self.id_col, self.time_col, self.target_col)

        # times
        self.times = df[self.time_col].to_numpy()

        # ids
        id_counts = _counts_by_id(df, self.id_col)
        self.uids = id_counts[self.id_col]

        # indices
        indptr = np.append(
            np.int64(0),
            id_counts["counts"].to_numpy().cumsum().astype(np.int64),
        )
        last_idxs = indptr[1:] - 1

        # data
        data = _value_cols_to_numpy(df, self.id_col, self.time_col, self.target_col)
        # ensure float dtype
        if data.dtype not in (np.float32, np.float64):
            data = data.astype(np.float32)
        # ensure 2d
        if data.ndim == 1:
            data = data.reshape(1, -1)

        # check if we need to sort
        sort_idxs = self._maybe_compute_sort_indices(df)
        if sort_idxs is not None:
            data = data[sort_idxs]
            last_idxs = sort_idxs[last_idxs]
        self.ga = GroupedArray(data, indptr)
        self.times = self.times[last_idxs]
        return self
