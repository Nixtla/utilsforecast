# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/processing.ipynb.

# %% auto 0
__all__ = ['DataFrameProcessing2']

# %% ../nbs/processing.ipynb 3
from typing import Union

import numpy as np
import pandas as pd

from .compat import DataFrame, pl_DataFrame
from .grouped_array import GroupedArray

# %% ../nbs/processing.ipynb 6
class DataFrameProcessing2:
    def __init__(
        self,
        df: DataFrame,
        id_col: str = "unique_id",
        time_col: str = "ds",
        target_col: str = "y",
    ):
        # Required columns
        missing_cols = {id_col, time_col, target_col} - set(df.columns)
        if missing_cols:
            raise ValueError(f"The following columns are missing: {missing_cols}")

        # Time col
        times = df[time_col].to_numpy()
        times_dtype = times.dtype
        if not (
            np.issubdtype(times_dtype, np.datetime64)
            or np.issubdtype(times_dtype, np.integer)
        ):
            raise ValueError(
                f"The '{time_col}' column should have either datetimes or integers, got {times_dtype}."
            )

        # Ids
        uids = df[id_col].to_numpy()
        id_counts = pd.Series(uids).value_counts().sort_index()
        self.uids = id_counts.index

        # Indptr
        self.indptr = np.append(0, id_counts.values.cumsum())
        last_idxs = self.indptr[1:] - 1

        # Data
        value_cols = [col for col in df.columns if col not in (id_col, time_col)]
        self.data = df[value_cols].to_numpy()
        if self.data.dtype not in (np.float32, np.float64):
            self.data = self.data.astype(np.float32)

        # Check if we need to sort
        idx = pd.MultiIndex.from_arrays([uids, times])
        if not idx.is_monotonic_increasing:
            if isinstance(df, pd.DataFrame):
                sort_idxs = idx.argsort()
            else:
                import polars as pl

                sort_idxs = df.select(pl.arg_sort_by(["unique_id", "ds"]).alias("idx"))[
                    "idx"
                ].to_numpy()
            self.data = self.data[sort_idxs]
            last_idxs = sort_idxs[last_idxs]
        self.times = times[last_idxs]
